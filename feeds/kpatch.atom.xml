<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.kragniz.eu</title><link href="http://blog.kragniz.eu/" rel="alternate"></link><link href="http://blog.kragniz.eu/feeds/kpatch.atom.xml" rel="self"></link><id>http://blog.kragniz.eu/</id><updated>2015-06-29T22:23:00+00:00</updated><entry><title>kpatch-package-builder 0.1.0</title><link href="http://blog.kragniz.eu/kpatch-package-builder" rel="alternate"></link><updated>2015-06-29T22:23:00+00:00</updated><author><name>Louis Taylor</name></author><id>tag:blog.kragniz.eu,2015-06-29:kpatch-package-builder</id><summary type="html">&lt;p&gt;As part of &lt;a class="reference external" href="https://developers.google.com/open-source/gsoc/"&gt;Google Summer of Code&lt;/a&gt;, I've been working with the
CentOS project to create a delivery and build system to provide easy and
automatic delivery of patches to a running linux kernel. CentOS 7 currently has
support for live patching a running kernel (via the kpatch kernel module and
the surrounding userland tools), but crafting a patch and applying it is a
currently a very manual process. The overall aim of the project is to make
applying kernel fixes an easy and automatic process, which will make it easier
to keep a CentOS installation more secure by without having to schedule
downtime.&lt;/p&gt;
&lt;p&gt;As the first part of this project, I've been writing
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kpatch-package-builder&lt;/span&gt;&lt;/tt&gt;, a tool which generates RPM packages containing a
kernel module which patchs the currently running kernel.  These distributable
packages contain a single kernel patch, so standard package management tools,
such as dnf and yum can install and manage them.&lt;/p&gt;
&lt;p&gt;This first version is pretty simple. You create a patch against the source of the
kernel you want to modify, then run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kpatch-package-builder&lt;/span&gt;&lt;/tt&gt; with the patch
name as the last argument. The output can either be a built .rpm file, or the
raw spec.&lt;/p&gt;
&lt;p&gt;By default &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kpatch-package-builder&lt;/span&gt;&lt;/tt&gt; outputs an RPM .spec file, which can be
used to build the RPM. This is a very simple spec, which just specifies the
name of the package, description, and other common package metadata. The name
of the package currently is based off the patch filename with a prefix of
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kpatch-module-&lt;/span&gt;&lt;/tt&gt;, which allows these packages to be simply distinguished.
Future versions will have a series of virtual dependencies to prevent patch
collisions, but that's something for a future post.&lt;/p&gt;
&lt;p&gt;When given the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-b&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--build-rpm&lt;/span&gt;&lt;/tt&gt; option, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kpatch-package-builder&lt;/span&gt;&lt;/tt&gt;
will invoke rpmbuild and build the package in place. The makes the kernel patch
to distributable package a single step.&lt;/p&gt;
&lt;p&gt;As an example, creating a package from a patch file:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;vagrant&amp;#64;localhost ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kpatch-package-builder -b livepatch-test.patch
kpatch-package-builder: generating spec file...
kpatch-package-builder: building RPM...
kpatch-package-builder: writing spec file to /tmp/kpatch_3I6mHJ.spec...
kpatch-package-builder: writing kpatch-module-livepatch-test-1-1.x86_64.rpm...
&lt;/pre&gt;
&lt;p&gt;The default metadata associated with that generated package:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;vagrant&amp;#64;localhost ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rpm -qip kpatch-module-livepatch-test-1-1.x86_64.rpm
Name        : kpatch-module-livepatch-test
Version     : 1
Release     : 1
Architecture: x86_64
Install Date: &lt;span class="o"&gt;(&lt;/span&gt;not installed&lt;span class="o"&gt;)&lt;/span&gt;
Group       : System Environment/Kernel
Size        : 281661
License     : GPLv2
Signature   : &lt;span class="o"&gt;(&lt;/span&gt;none&lt;span class="o"&gt;)&lt;/span&gt;
Source RPM  : kpatch-module-livepatch-test-1-1.src.rpm
Build Date  : Wed &lt;span class="m"&gt;24&lt;/span&gt; Jun &lt;span class="m"&gt;2015&lt;/span&gt; 15:26:46 EDT
Build Host  : localhost
Relocations : &lt;span class="o"&gt;(&lt;/span&gt;not relocatable&lt;span class="o"&gt;)&lt;/span&gt;
Summary     : kpatch livepatch module
Description :
Package generated from livepatch-test.patch by kpatch-package-builder
&lt;/pre&gt;
&lt;p&gt;The contents of the package:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;vagrant&amp;#64;localhost ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rpm -qlp kpatch-module-livepatch-test-1-1.x86_64.rpm
/var/lib/kpatch/3.10.0-229.el7.x86_64/kpatch-livepatch-test.ko
&lt;/pre&gt;
&lt;p&gt;The current options available:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="o"&gt;[&lt;/span&gt;vagrant&amp;#64;localhost ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kpatch-package-builder -h
usage: kpatch-package-builder &lt;span class="o"&gt;[&lt;/span&gt;-h&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-v&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-o FILE &lt;span class="p"&gt;|&lt;/span&gt; -b&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-k VERSION&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-a ARCH&lt;span class="o"&gt;]&lt;/span&gt;
                              &lt;span class="o"&gt;[&lt;/span&gt;--set-release NUM&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--set-version NUM&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;-d&lt;span class="o"&gt;]&lt;/span&gt;
                              PATCH

Build an RPM package or an RPM spec file to install and manage a kpatch
livepatch module.

positional arguments:
  PATCH                 patch file from which to build the livepatch module

optional arguments:
  -h, --help            show this &lt;span class="nb"&gt;help &lt;/span&gt;message and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -v, --version         show program&lt;span class="err"&gt;'&lt;/span&gt;s version number and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -o FILE, --output FILE
                        name of output spec file
  -b, --build-rpm       build an RPM package
  -k VERSION, --kernel VERSION
                        target kernel version to build the livepatch module
                        against. Defaults to the currently running version
  -a ARCH, --arch ARCH  architecture to compile the patch against
  --set-release NUM     package release version
  --set-version NUM     package version number
  -d, --debug           print debug information

Usage examples:

Build an RPM package &lt;span class="k"&gt;for&lt;/span&gt; a given patch:

    &lt;span class="nv"&gt;$ &lt;/span&gt;kpatch-package-builder --build-rpm module.patch

Generate a spec file to later build into an RPM:

    &lt;span class="nv"&gt;$ &lt;/span&gt;kpatch-package-builder --output module.spec module.patch
&lt;/pre&gt;
&lt;p&gt;If you want to test this or use it yourself, the code lives at &lt;a class="reference external" href="https://github.com/centos-livepatching/kpatch-package-builder"&gt;https://github.com/centos-livepatching/kpatch-package-builder&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="future-work"&gt;
&lt;h2&gt;Future work&lt;/h2&gt;
&lt;p&gt;Next up is the rest of the tooling to make building and distributing a series
of patches across a set of kernel versions easy. This will be working on top of
the basic kpatch-package-builder functionality to allow building many versions
of packages for particular kernels.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="kernel"></category><category term="centos"></category><category term="gsoc"></category><category term="kpatch"></category></entry></feed>