<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blog.kragniz.eu</title><link href="http://blog.kragniz.eu/" rel="alternate"></link><link href="http://blog.kragniz.eu/feeds/raspberry-pi.atom.xml" rel="self"></link><id>http://blog.kragniz.eu/</id><updated>2016-01-22T22:23:00+00:00</updated><entry><title>Raspbian on Travis CI</title><link href="http://blog.kragniz.eu/raspbian-on-travis-ci" rel="alternate"></link><updated>2016-01-22T22:23:00+00:00</updated><author><name>Louis Taylor</name></author><id>tag:blog.kragniz.eu,2016-01-22:raspbian-on-travis-ci</id><summary type="html">&lt;p&gt;For abersailbot, I've been working on automation of provisioning images to run
on the main raspberry pi inside the boat. In the past, this has been a
primitive bash script which installs packages and configurations files with a
dubious amount of calls out to apt, cp and sed. Wanting to make this a little
more sophisticated, I started writing a set of ansible playbooks.&lt;/p&gt;
&lt;p&gt;For testing other repositories, I normally always use
&lt;a class="reference external" href="https://travis-ci.org"&gt;https://travis-ci.org&lt;/a&gt;. If you're not familiar, Travis CI offers free CI
resources for open source repositories. The VMs it boots are all Ubuntu on
x86_64, however. In order to test things on raspbian, some hacks would be
needed.&lt;/p&gt;
&lt;p&gt;Options I considered:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;No testing (no tests? What madness!)&lt;/li&gt;
&lt;li&gt;ARM chroot&lt;/li&gt;
&lt;li&gt;Raspbian fat Docker container&lt;/li&gt;
&lt;li&gt;Raspbian image booted under QEMU&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After some playing around, the QEMU route seemed like the best option. If you'd
like to do the same, the steps I took are fairly simple:&lt;/p&gt;
&lt;p&gt;First off, we need to get a disk image. The images provided from the Raspberry
Pi site need some small modifications to run under QEMU, so we need to mount
and edit it. I'm using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;2015-11-21-raspbian-jessie-lite.img&lt;/span&gt;&lt;/tt&gt; image from
&lt;a class="reference external" href="https://www.raspberrypi.org/downloads/raspbian/"&gt;https://www.raspberrypi.org/downloads/raspbian/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This image contains two partitions, a small boot partition (FAT) which contains
a few config files and a kernel, and the main ext4 root partition. The latter
is the partition we're interested in. You can inspect the image with &lt;tt class="docutils literal"&gt;fdisk&lt;/tt&gt;
to show these:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/g/dewi (master) $ fdisk -l 2015-11-21-raspbian-jessie-lite.img
Disk 2015-11-21-raspbian-jessie-lite.img: 1.4 GiB, 1458569216 bytes, 2848768 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0xb3c5e39a

Device                               Boot  Start     End Sectors  Size Id Type
2015-11-21-raspbian-jessie-lite.img1        8192  131071  122880   60M  c W95 FAT32 (LBA)
2015-11-21-raspbian-jessie-lite.img2      131072 2848767 2717696  1.3G 83 Linux
&lt;/pre&gt;
&lt;p&gt;Note the start of the partition we're interested in (131072). This is the
offset from the start of the image in terms of number of sectors. The sector
size is 512, so the actual offset in terms of bytes is 131072 Ã— 512 =
67108864.&lt;/p&gt;
&lt;p&gt;Armed with this knowledge, we can mount the image and edit files on it
interactively.&lt;/p&gt;
&lt;p&gt;First, create a directory to mount the image:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir raspbian-jessie-mount-point
&lt;/pre&gt;
&lt;p&gt;then mount the image:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo mount -o loop,offset=67108864 2015-11-21-raspbian-jessie-lite.img \
  raspbian-jessie-mount-point
&lt;/pre&gt;
&lt;p&gt;Now it's time to comment out a bunch of things.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspbian-jessie-mount-point/etc/ld.so.preload&lt;/span&gt;&lt;/tt&gt; in an editor of your
choice and comment out all lines.&lt;/li&gt;
&lt;li&gt;Do the same and comment out all lines related to &lt;tt class="docutils literal"&gt;mmccblk&lt;/tt&gt; in
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspbian-jessie-mount-point/etc/fstab&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After these edits have been made, unmount the image:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo umount raspbian-jessie-mount-point
&lt;/pre&gt;
&lt;p&gt;The modified image can now be saved and backed up somewhere. I took a copy and
compressed it to save on space:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ xz 2015-11-21-raspbian-jessie-lite.img
&lt;/pre&gt;
&lt;p&gt;Now we have an image to boot, we need a kernel to run. Sadly, a modified
kernel is required, since QEMU does not support raspberry pi hardware. Luckily
the work of patching and building has already been done by someone else.
&lt;a class="reference external" href="https://github.com/polaco1782/raspberry-qemu"&gt;https://github.com/polaco1782/raspberry-qemu&lt;/a&gt; appears to work well.&lt;/p&gt;
&lt;p&gt;Clone that repository and copy &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kernel-qemu&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone git&amp;#64;github.com:polaco1782/raspberry-qemu.git
$ cp raspberry-qemu/kernel-qemu .
&lt;/pre&gt;
&lt;p&gt;At this point, booting should be possible. To test, first install
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;qemu-system-arm&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If you're on Fedora:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo dnf install qemu-system-arm
&lt;/pre&gt;
&lt;p&gt;Or Debian/Ubuntu:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo apt install qemu-system-arm
&lt;/pre&gt;
&lt;p&gt;Then run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ qemu-system-arm \
    -kernel kernel-qemu \
    -cpu arm1176 \
    -m 256 \
    -M versatilepb \
    -no-reboot \
    -serial stdio \
    -display none \
    -append &amp;quot;root=/dev/sda2 panic=1 rootfstype=ext4 rw&amp;quot; \
    -net user,hostfwd=tcp::10022-:22 \
    -net nic -hda \
    2015-11-21-raspbian-jessie-lite.img
&lt;/pre&gt;
&lt;p&gt;Note the option &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-net&lt;/span&gt; &lt;span class="pre"&gt;user,hostfwd=tcp::10022-:22&lt;/span&gt;&lt;/tt&gt;. This forwards port 22 on
raspbian to 10022 on the host, allowing us to ssh into the booted VM.&lt;/p&gt;
&lt;p&gt;You should see some output similar to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pulseaudio: pa_context_connect() failed
pulseaudio: Reason: Connection refused
pulseaudio: Failed to initialize PA contextaudio: Could not init `pa' audio driver
ALSA lib confmisc.c:768:(parse_card) cannot find card '0'
ALSA lib conf.c:4248:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
ALSA lib conf.c:4248:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
ALSA lib confmisc.c:1251:(snd_func_refer) error evaluating name
ALSA lib conf.c:4248:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
ALSA lib conf.c:4727:(snd_config_expand) Evaluate error: No such file or directory
ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM default
alsa: Could not initialize DAC
alsa: Failed to open `default':
alsa: Reason: No such file or directory
ALSA lib confmisc.c:768:(parse_card) cannot find card '0'
ALSA lib conf.c:4248:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
ALSA lib conf.c:4248:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
ALSA lib confmisc.c:1251:(snd_func_refer) error evaluating name
ALSA lib conf.c:4248:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
ALSA lib conf.c:4727:(snd_config_expand) Evaluate error: No such file or directory
ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM default
alsa: Could not initialize DAC
alsa: Failed to open `default':
alsa: Reason: No such file or directory
audio: Failed to create voice `lm4549.out'
Uncompressing Linux... done, booting the kernel.
&lt;/pre&gt;
&lt;p&gt;Test if a login works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ssh localhost -o StrictHostKeyChecking=no -p 10022 -l pi
&lt;/pre&gt;
&lt;p&gt;The password should be the default &lt;tt class="docutils literal"&gt;raspberry&lt;/tt&gt;, unless you changed it
earlier.&lt;/p&gt;
&lt;p&gt;If this all works, you can start writing your &lt;tt class="docutils literal"&gt;.travis.yml&lt;/tt&gt; to boot this VM
on Travis CI runs. You should first enable travis commit hooks on your
repository (read the &lt;a class="reference external" href="https://docs.travis-ci.com/user/getting-started/"&gt;getting started guide&lt;/a&gt;), then start writing a
configuration file. A simple version of the config file to start off:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;generic&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;dist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;trusty&lt;/span&gt;

&lt;span class="n"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;xz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt; &lt;span class="n"&gt;sshpass&lt;/span&gt;

&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://super-secret-location.com/2015-11-21-raspbian-jessie-lite.img.xz&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;unxz&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2015-11-21-raspbian-jessie-lite.img.xz&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;polaco1782&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;raspberry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;

&lt;span class="n"&gt;before_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;arm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt; &lt;span class="n"&gt;raspberry&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qemu&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt; &lt;span class="n"&gt;arm1176&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;versatilepb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reboot&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt; &lt;span class="n"&gt;stdio&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;root=/dev/sda2 panic=1 rootfstype=ext4 rw&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;hostfwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;10022&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="n"&gt;nic&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;hda&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raspbian&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;jessie&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;

&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sshpass&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;raspberry&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;StrictHostKeyChecking&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;10022&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;cat /etc/os-release&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# whatever you want to test here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should note this requires a mirror of the image created in the earlier
steps. Each CI run will have to download and decompress the image. With Travis
Pro, I believe you might be able to do something different and cache it, but I
didn't investigate this.&lt;/p&gt;
&lt;p&gt;This runs &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;qemu-system-arm&lt;/span&gt;&lt;/tt&gt; in the background. In order to wait until the VM
is ready, I made a crude script named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wait-for-ssh&lt;/span&gt;&lt;/tt&gt; to ping the ssh port
until it responded:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; nc -z localhost &lt;span class="m"&gt;10022&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Found something on port 10022!&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Nothing found on port 10022, sleeping...&amp;quot;&lt;/span&gt;
        sleep 10
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When this is done, you can actually test the stuff you wanted to test in the
first place! In the example &lt;tt class="docutils literal"&gt;.travis.yml&lt;/tt&gt;, I do a sanity check and cat
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/os-release&lt;/span&gt;&lt;/tt&gt;, expecting something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PRETTY_NAME=&amp;quot;Raspbian GNU/Linux 8 (jessie)&amp;quot;
NAME=&amp;quot;Raspbian GNU/Linux&amp;quot;
VERSION_ID=&amp;quot;8&amp;quot;
VERSION=&amp;quot;8 (jessie)&amp;quot;
ID=raspbian
ID_LIKE=debian
HOME_URL=&amp;quot;http://www.raspbian.org/&amp;quot;
SUPPORT_URL=&amp;quot;http://www.raspbian.org/RaspbianForums&amp;quot;
BUG_REPORT_URL=&amp;quot;http://www.raspbian.org/RaspbianBugs&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Now you have a little Raspbian VM booted on every commit. Run some ansible or
puppet against it and you're done. Happy testing!&lt;/p&gt;
</summary><category term="raspbian"></category><category term="raspberry pi"></category><category term="qemu"></category></entry></feed>